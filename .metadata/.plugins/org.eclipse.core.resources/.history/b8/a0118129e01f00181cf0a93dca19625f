import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;


public class DenseTable {
	String ColumnName; //The Column we   cluster with 
	
	String strTableName; //table name
	ArrayList<DenseIndex> denses;
	Table table;
	
	
	Hashtable<String,String> htblColNameType;
	public DenseTable(Table table,String ColumnName){
		this.table=table;
		this.ColumnName=ColumnName;
		this.denses=new ArrayList<DenseIndex>();
		Initialize();
		

	}
	public void insertIntoTable(Hashtable<String, Object> htblColNameVale) throws DBAppException{
	
			
		boolean IsString=false;
		
		
		if(htblColNameVale.containsKey(ColumnName)){
			Object key= htblColNameVale.get(ColumnName);
		}
			if(key instanceof String){
				String primary=(String)key;
			
					
					for(int i=0;i<Pages.size();i++){  ///this is disgusting .. im ashamed of u romy
						Page p=Pages.get(i);
						LinkedList<Hashtable<String,Object>> tuples=p.tuples;
					 if(!tuples.isEmpty()){
						Hashtable<String,Object> first=tuples.getFirst();
						Hashtable<String,Object> Last=tuples.getLast();
						String firstValue= (String)first.get(strClusteringKeyColumn);
						String SecondValue= (String)Last.get(strClusteringKeyColumn);
						int Upper=primary.compareTo(firstValue);
						
						
						int Lower=primary.compareTo(SecondValue);
						//System.out.println(Upper);
						//System.out.println(Lower);

						/*String FirstKey= "0";
						String SecondKey="0";
						byte[] ByteFirst = firstValue.getBytes("UTF-8");
						byte[] ByteSecond = SecondValue.getBytes("UTF-8");
						for(int j = ByteFirst.length-1;j>0;j--){
							FirstKey=ByteFirst[i]+""+FirstKey;}
						
						for(int j = ByteSecond.length-1;j>0;j--){
							SecondKey=ByteSecond[j]+""+SecondKey;
							
						}
						long firstParsed=Long.parseLong(FirstKey);
						long secondParsed=Long.parseLong(SecondKey);*/
						/// this check is for when the value exists between the first two values of two pages 
						// indicating that the value must be inserted in the first page of
						if((Upper>0 && Lower<0) ||(Upper>0)||(Lower<0)){ //////Fixed the exception
							
							p.insertIntoPage(htblColNameVale,primary, -1,!IsString);
							
                            
							//p.loadPage(i,this.strTableName);
							if(p.check()){
								 updatePages(i,primary, -1, !IsString);
							 }
							LoadAll();
							break;
					}
						
					 
					}
					 
					
					 else{
						 p.insertIntoPage(htblColNameVale, primary,-1,!IsString); //Increased attributes
							//p.loadPage(i,this.strTableName);
						 if(p.check()){
							 updatePages(i,primary, -1, !IsString);
							 }
							LoadAll();
							break;
					 }
						
					}
				}
					//
			
			else{
				//case numerical
				
				
				int key1=(int)htblColNameVale.get(strClusteringKeyColumn);
				
				for(int i=0;i<Pages.size();i++){  ///this is disgusting .. im ashamed of u romy
					Page p=Pages.get(i);
					LinkedList<Hashtable<String,Object>> tuples=p.tuples;
					
				
				 if(!tuples.isEmpty()){
					//System.out.println(tuples.size());
					//System.out.println(tuples.get(0));
					
					//System.out.println(key1);
					Hashtable<String,Object> first=tuples.getFirst();
					
					//System.out.println(tuples.getFirst());
					Hashtable<String,Object> Last=Pages.get(i).tuples.getLast();
					int firstValue= (int)first.get(strClusteringKeyColumn);
					//System.out.println(firstValue+"first"); //it prints our value
					int SecondValue= (int)Last.get(strClusteringKeyColumn);
					//System.out.println(SecondValue+"last");
					
                    
                    	
                     /*if(key1>firstValue){
                    	 //p.insertIntoPage(htblColNameVale, key1,IsString);
                    	 tuples.addLast(htblColNameVale);
                    	
                     }
                     
                     else if(key1<SecondValue){
                    	 
                    	 tuples.addFirst(htblColNameVale);
                     }*/
                    	 
                    
                    
                     
                  
                    	
                    if((key1>firstValue&& key1<SecondValue)||(key1<SecondValue)||(key1>firstValue)){ //missing case

					p.insertIntoPage(htblColNameVale,"" ,key1,IsString);
					
					
					//p.loadPage(i,this.strTableName);
					 if(p.check()){
						 updatePages(i,"", key1, IsString);
					 }
						LoadAll();
						break;
					}
				
			
				

			}
				 
				 else{
					 p.insertIntoPage(htblColNameVale,"" ,key1,IsString);
					
					 
					 
					 
					
					
					 if(p.check()){
							updatePages(i,"", key1, IsString);
						 }
					 LoadAll();
					 break;
				 }
		}
				
			
			
	  }
			
		
		
		
		}
		
		else{
			throw new DBAppException();//TO-DO message
		}
	}
		
		
	
	public void Initialize(){
		ArrayList<Page> Pages=this.table.Pages;
		
		for(int i=0;i<Pages.size();i++){
			Page p=Pages.get(i);
			LinkedList<Hashtable<String,Object>> Pagetuples=p.tuples;
			DenseIndex Dense=new DenseIndex(ColumnName);
			denses.add(Dense);
			for(int j=0;j<Pagetuples.size();j++){
				if(Pagetuples.get(i).containsKey(ColumnName)){
					Object key= Pagetuples.get(i).get(ColumnName); //Get Value we want to Cluster On
					InsertIntoDenseTable(key);
					
				}
				   
					
				//Dense.InsertIntoDense(t.get(i));
				
				
				
			
			
			
		}}
	}
	public void InsertIntoDenseTable(Object keyValue){
		for(int i=0;i<denses.size();i++){ 
		
		
		
	}

}
