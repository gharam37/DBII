import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import java.util.Map.Entry;


public class DenseIndex {
    String ColumnName;
   
    LinkedList<Entity> Densetuples;  // Gonna be create in page 200 elements also of entities
	File file ;

     public DenseIndex(String ColumnName){
    	
    	this.ColumnName=ColumnName;
    
    	
    	this.Densetuples=new LinkedList<Entity>();
    	
    	
    	//Tuples will contain entities 
    	
    	
    	
    }
    public void InsertIntoDense(Object Value,boolean isString){
    	Entity Entity =null;
    
		if(isString){ /////////////Remember to add currentLine
		
			if(!Densetuples.isEmpty()){
				for(int i = 0;i<Densetuples.size();i++){
	    			Entity= Densetuples.get(i);
	    			Set<Entry<String,Object>> SecondTuple = hashtable.entrySet();
	    			Iterator <Entry<String, Object>> Iterator2= SecondTuple.iterator();
	    			
	    			//int ToIntHashCurrentValue=0;
	    			String HashCurrentValue="";
	    			while (Iterator2.hasNext()) {
	    				Entry<String, Object> en1 = Iterator2.next();
	    			
	    				
	    				if (strClusteringKeyColumn.equals(en1.getKey())) {
	    					 HashCurrentValue=(String)en1.getValue(); 
	    				  //ToIntHashCurrentValue=Integer.parseInt(HashCurrentValue);
	    				    
	    				}
	    				
	    			}
	    			
	    			
	    	 
	    	   
	    	    
	    	    if(HashCurrentValue.compareTo(KeyValue)>0 && i==0){
             	   tuples.addFirst(htblColNameVale);
             	   currentLine++;
             	   break;}
	    	 
	    	
	    	   if(HashCurrentValue.compareTo(KeyValue)>0){
	   				tuples.add(i,htblColNameVale);
	   				currentLine++;
	   		         break;}
	    	    if(HashCurrentValue.compareTo(KeyValue)<0 && i==tuples.size()-1){
   	    	
          	   tuples.addLast(htblColNameVale); 
          	   currentLine++;
          	   break;}
	    	
	    	
	    			
	    	else if(HashCurrentValue.compareTo(KeyValue)==0){
	    				throw new DBAppException(); ///print already exists
	    				
	    	}
	    		
	    		
	    			
	    	}
				
				
			}
			else{
				tuples.add(0,htblColNameVale);
				currentLine++;
			}

			
		}
		
		
		
		else{
			///case int 
		 if(!tuples.isEmpty()){
			 //System.out.println("Here");
			 //System.out.println(htblColNameVale); //What empties tuples ? 
			
			for(int i = 0;i<tuples.size();i++){
    			hashtable= tuples.get(i);
    			Set<Entry<String,Object>> SecondTuple = hashtable.entrySet();
    			Iterator <Entry<String, Object>> Iterator2= SecondTuple.iterator();
    			
    			int ToIntHashCurrentValue=0;
    			while (Iterator2.hasNext()) {
    				Entry<String, Object> en1 = Iterator2.next();
    			
    				
    				if (strClusteringKeyColumn.equals(en1.getKey())) {
    				    ToIntHashCurrentValue = (int)en1.getValue();
    				}
    				
    			}
				
    	  if(ToIntHashCurrentValue>clusterKeyPrimary && i==tuples.size()-1){
                	   tuples.addFirst(htblColNameVale);
                	   currentLine++;
                	   break;}
    	  else  if(ToIntHashCurrentValue<clusterKeyPrimary && i==0){
    	    	
            	   tuples.addLast(htblColNameVale); 
            	   currentLine++;
            	   break;}
    	      if(ToIntHashCurrentValue<clusterKeyPrimary){
   				tuples.add(i,htblColNameVale);
   				currentLine++;
   		         break;
   				
   			}
               else if(ToIntHashCurrentValue==clusterKeyPrimary){
    				throw new DBAppException(); ///print already exists
    				
    			}
    			
    		//Hello
    			
    		}}
		 
		 
		 else{
			tuples.add(0,htblColNameVale);
			currentLine++;
			//htblColNameVale.clear();
			//Only enters with the first insertion
		 }
		}
    	
    	
    	
    }
    
    public void loadDense(int Index,String tablename){
    	this.file = new File(tablename+"Dense"+Index+".csv");
    	boolean exists = file.exists();
      
		try {
			FileWriter writer = new FileWriter(tablename+Index+".csv");
			
           for(int i=0;i<Densetuples.size();i++){
        	   
         
			writer.append("\n");
            System.out.println(Densetuples.get(i));
			// generate whatever data you want 
			
           }
			writer.flush();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
    	
    
      }
}
